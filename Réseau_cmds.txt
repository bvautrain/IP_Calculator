Bien sûr ! J’ai remis ton document en **format clair et structuré**, lisible en CAT (cours/atelier/TP). J’ai également harmonisé les titres, sous-titres et commandes pour une lecture fluide.

---

# Réseaux Avancés

**Durée :** 3h
**Lieu :** Salle machine
**Infrastructure :** GNS3

**Thèmes abordés :**

* Spanning-Tree (STP)
* VLAN
* VLSM
* IPv6
* Routing

---

# Guide de Configuration Réseau GNS3

## 1. Préparation du réseau

* Créez la topologie selon le schéma du projet.
* Vérifiez les connexions entre tous les équipements.

> Commande utile pour voir les voisins directs (CDP) :

```bash
show cdp neighbors
```

---

## 2. Configuration de base des équipements

### Nommer les équipements

```bash
R1(config)# hostname [NOM_DU_ROUTEUR]
```

### Configurer les adresses IPv4 et IPv6

**Sur un routeur :**

```bash
R1(config)# interface [type]/[num]
R1(config-if)# ip address [X.X.X.X] [MASQUE]
R1(config-if)# ipv6 address [ZZ:ZZ::ZZ]/[PREFIX]
```

**Sur un PC Ubuntu / Docker :**

```bash
root# ifconfig [interface] [ip] netmask [masque] up
root# ifconfig [interface] inet6 add [ipv6]/[prefix]
root# route add default gw [adresse_IP_passerelle] [interface]
```

**Sur un PC VPCS :**

```bash
VPCS> ip [ip] [masque] [gateway]
VPCS> ipv6 [ip]/[prefix] [gateway]
```

### Activer les interfaces

```bash
R1(config-if)# no shutdown
```

### Tester la connectivité de base

```bash
ping [IP_DU_VOISIN_DIRECT]
```

---

## 3. Configuration des VLANs et Inter-VLAN

### Créer des VLANs et assigner les ports (switch)

```bash
ESW1(config)# vlan 10
ESW1(config-vlan)# name [NOM_VLAN]
ESW1(config-vlan)# exit

ESW1(config)# interface [port_PC]
ESW1(config-if)# switchport mode access
ESW1(config-if)# switchport access vlan 10
ESW1(config-if)# no shutdown
```

### Configurer les ports Trunk

```bash
ESW1(config)# interface [port_TRUNK]
ESW1(config-if)# switchport mode trunk
ESW1(config-if)# no shutdown
```

### Configurer les passerelles Inter-VLAN (Router-on-a-Stick)

```bash
R1(config)# interface [port_PHYSIQUE]
R1(config-if)# no shutdown
R1(config)# interface [port_PHYSIQUE].XX
R1(config-if)# encapsulation dot1q XX
R1(config-if)# ip address [GATEWAY_VLAN_XX] [MASQUE]
```

---

## 4. Routage statique IPv4 et IPv6

### Activer le routage IPv6

```bash
R1(config)# ipv6 unicast-routing
```

### Ajouter des routes sur les routeurs

```bash
R1(config)# ip route [RÉSEAU_DEST] [MASQUE_DEST] [IP_DU_PROCHAIN_SAUT]
R1(config)# ipv6 route [RÉSEAU_DEST_IPV6]/[PREFIX] [IP_DU_PROCHAIN_SAUT_IPV6]
```

### Configurer la passerelle sur les PC

```bash
root# ip route add default via [gateway]
root# ip -6 route add default via [gateway]
```

### Vérifier la connectivité

```bash
ping [IP_D_UN_RÉSEAU_DISTANT]
```

---

## 5. Route flottante (de secours)

### Ajouter une route de secours avec distance administrative (AD)

```bash
R1(config)# ip route [RÉSEAU_DEST] [MASQUE_DEST] [IP_NEXT_HOP_SECOURS] [AD]
R1(config)# ipv6 route [RÉSEAU_DEST_IPV6]/[PREFIX] [IP_NEXT_HOP_SECOURS] [AD]
```

### Tester la route de secours

```bash
R1(config)# interface [type]/[num_LIEN_PRINCIPAL]
R1(config-if)# shutdown

show ip route
ping [IP_D_UN_RÉSEAU_DISTANT]

R1(config-if)# no shutdown
```

---

## 6. Configuration Spanning Tree (STP)

### Définir le switch Root Bridge

```bash
ESW2(config)# spanning-tree vlan [LISTE_VLANs] root primary
# ou manuellement
ESW2(config)# spanning-tree vlan [LISTE_VLANs] priority 4096
```

### Optimiser les ports d’accès (PortFast)

```bash
ESW1(config)# interface [port_PC]
ESW1(config-if)# spanning-tree portfast
```

### Vérifier STP

```bash
show spanning-tree vlan [NUM_VLAN]
```

* Vérifier : "This bridge is the root" sur le Root Bridge
* Vérifier l’état des ports : FWD (Forwarding) ou BLK (Blocking)

---

## 7. Vérification et sauvegarde

### Vérifier la table de routage

```bash
show ip route
show ipv6 route
show ip route static
```

### Tester la connectivité globale

```bash
ping [IP_DISTANTE]
traceroute [IP_DISTANTE]
```

### Sauvegarder la configuration

```bash
R1# write memory
```

---

# VLSM – Exemple pratique

**Réseau :** 192.168.40.0/24
**Objectif :** 3 sous-réseaux

### Calculs

* Nombre de sous-réseaux nécessaires : NSR = 3 → puissance 2 ≥ 3 → 2² = 4
* Nouveau masque : /24 + 2 = /26 → 255.255.255.192
* Pas : T = 256 – 192 = 64
* Diffusion : broadcast = ID + MG
* Nombre d’hôtes par sous-réseau : 2^(32-26) – 2 = 62

### Subnets

| ID | Subnet           | IP de départ  | IP de fin     |
| -- | ---------------- | ------------- | ------------- |
| 1  | 192.168.40.0/26  | 192.168.40.1  | 192.168.40.62 |
| 2  | 192.168.40.64/26 | 192.168.40.65 | …             |
| …  | …                | …             | …             |

---

# Récapitulatif Configuration VLAN et Routage

### Switch

```bash
conf t
vlan xx
name yyy
interface x/x
switchport mode access/trunk
switchport access vlan xx
no shutdown
spanning-tree vlan xx root primary
spanning-tree portfast (interfaces PC)
```

### Routeur

```bash
conf t
interface fX/X.YY
encapsulation dot1q YY
ip address X.X.X.Y/M
ip routing
no shutdown
```

### PC

```bash
ifconfig [interface] [ip] netmask [masque] up
ifconfig [interface] inet6 add [ipv6]/[prefix]
ip route add default via [gateway]
ip -6 route add default via [gateway]
```

---

# Commandes utiles

```bash
show ipv6 neighbors
show interface
show hist
show ip route
show spanning-tree vlan xx
wr mem
```

---

Si tu veux, je peux te **faire une version encore plus compacte en tableau**, idéale pour avoir **toutes les commandes et configurations sur une seule page CAT**.

Veux‑tu que je fasse ça ?
